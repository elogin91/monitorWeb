import cron from 'node-cron';
import { NextResponse } from 'next/server';
import axios from 'axios';

// Lista de URLs de las webs que estamos monitorizando
const websites = [
'https://www.telefonica.com/es/',
'https://www.google.com/',
'http://mipaginanoexiste.com/',
];

// Tipo para representar el estado de una web
interface WebsiteStatus {
  url: string;
  status: string;
  headers: {
    statusCode: string | number;
    date: string;
    contentType: string;
  };
  responseTime: string;
  lastChecked: string;
}

// Estado global para almacenar los resultados
let websitesStatus: { [key: string]: WebsiteStatus } = {};

// Función para comprobar el estado de las webs
async function checkWebsiteStatus(url: string): Promise<WebsiteStatus> {
    const startTime = Date.now(); // Inicia el temporizador para calcular el responseTime
  try {
    const response = await axios.get(url);
    const endTime = Date.now(); // Detiene el temporizador después de recibir la respuesta para calcular el responseTime
    const responseTime = `${endTime - startTime} ms`; // Calcula el tiempo de respuesta en milisegundos
    const status = response.status === 200 ? 'Online' : `Offline - ${response.status}`;

    return {
      url,
      status,
      responseTime,
      lastChecked: new Date().toLocaleString(),
      headers: {
        statusCode: response.status,
        date: response.headers['date'],
        contentType: response.headers['content-type']
      }
    };
  } catch (error) {
      console.log(error)
    return {
      url,
      status: 'Offline',
      responseTime: 'N/A',
      lastChecked: new Date().toLocaleString(),
      headers: {
        statusCode: 'N/A',
        date: 'N/A',
        contentType: 'N/A'
      }
    };
  }
}

// Función para obtener el estado de todas las webs
async function getWebsitesStatus() {
  const statusPromises = websites.map((website) => checkWebsiteStatus(website));
  return await Promise.all(statusPromises);
}

export async function  updateWebsitesStatus() {
    const status = await getWebsitesStatus();
    // Actualizamos el estado global
    websitesStatus = status.reduce((acc, curr) => {
      acc[curr.url] = curr;
      return acc;
    }, {} as { [key: string]: WebsiteStatus });
    console.log('Websites status updated');
}

// Cron job que corre cada 5 minutos para comprobar el estado de las webs
cron.schedule('*/5 * * * *', async () => {updateWebsitesStatus()});



// Configurar el cron job para el resumen diario
cron.schedule('0 12 * * *', async () => { // Esta cron job se ejecutará todos los días a las 12:00 PM
// Obtener el resumen del estado de las webs
  const summary = await getWebsitesStatusSummary();

  // Enviar resumen a Telegram
  await sendTelegramMessage(summary);
});

// Función para obtener el resumen del estado de las webs
async function getWebsitesStatusSummary() {
  const websitesStatus = await getWebsitesStatus();
  const statusSummary = websitesStatus.map(website => {
    return `${website.url}: ${website.status} - Última comprobación: ${website.lastChecked}\n` +
           `Código de respuesta: ${website.headers.statusCode} | Tiempo de respuesta: ${website.responseTime}\n` +
           `Fecha: ${website.headers.date} | Tipo de contenido: ${website.headers.contentType}\n`;
  }).join('\n');

  return `Resumen diario:\n\n${statusSummary}`;
}

// Función para enviar mensaje a Telegram
async function sendTelegramMessage(message: string) {
  try {
    const response = await axios.get(
      `https://api.telegram.org/bot7529187834:AAFWkdGjppE5vOwgIkJ_8hbzv6RRHD415bw/sendMessage`, {
        params: {
          chat_id: '-1002340684241',
          text: message
        }
      });
    if (response.data.ok) {
      console.log('Mensaje enviado correctamente');
    } else {
      console.error('Error al enviar el mensaje:', response.data);
    }
  } catch (error) {
    console.error('Error al enviar el mensaje:', error);
  }
}*/

// Ruta GET para comprobar el estado de las webs manualmente
export async function GET() {
  
  return NextResponse.json(Object.values(websitesStatus));
}
